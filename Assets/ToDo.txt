- did all the first rework for managers -- need a manager spawner

- cleanup to remove all globals?

- maybe just... an object with a bunch of functions.  maybe even a monobehavior?  maybe an SO that just has functions?
- would need a monobehavior
- could also just put those things into the background manager itself but...  i think that's fighting the design too much...
- maybe just a monobehavior taht's just like... input policy or something like that...

- OK for... background input manager... how the f would we even hook up the actions without code or whatever?
- just put the code in the manager itself or at the very worst, some POOC attached to the manager
- something like "input code definitions"
- maybe that's it, we just need code?
- alternatively, there can just be an SO with a whole shitload of actions you select from...  ???

UIManager is a bit weird... at the very least, the naming is off...
ok... i think "UIManager" is really like... divorced from actual inputs or display.  it's more of like... "focus manager" or something.. - look into it

-ok new direction. prefab all the managers.  this will allow us to keep all the refs to various things like prefabs and so's.  still need to do hookups in code
	- probably the best of both worlds
	- code changes to:
		- mousemanager
		- backgroundinputmanager
		- uimanager
		- pollutionmanager
		- actorunitmanager (gridmap)
		- mapeffectsmanager (gridmap)
		- PATHINGCONTROLLER (gridmap)

- then need to do another pass removing singletons

WHEN DONE WITH ALL THESE "FIXES" COME BACK AND DELETE ALL THE COMMENTED OUT CODE

- also need prefab locator???
- gridMap is a singleton.  should fix but... very messy.
- problem is gridmap has some sort of implicit reliance on children gameobjects... not sure what that's all about...
- can get rid of all instance references...
- so... the other problem with instantiating from code is i need to find serialized objects.
- so i need to find both serialized objects and prefabs
- maybe... what i can do is just...  in the self-init, have all the guys set their own values based on some kind of prefab loader and SO loader...
- one easy way to do it is just... one giant object with SO refs and one giant object with prefab refs.  then we pass in those objects in our init and they can get what they want

ActorUnitManager -> references UIManager directly... probably don't want...

- self init and mutual init should get a service locator class
- service locator, pass that in as DI
- move away from singletons -- use the service locator to get what is needed

- the main thing we need to do here is to spawn all managers programmatically, as well as a bunch of other things.
	- FOR ALL MANAGERS, WE SHOULD AVOID USING AWAKE AND START.  THESE MANAGERS SHOULD BE SPAWNED AND INITIALIZED PROGRAMMATICALLY.

	- gridmap
	- map gen
		- splotches
		- buildings (trees?)

- maybe a "set references" function that just sets all references.  then you can null check everything...

ok we are trying to just... start from scratch - load whole scene.  problem is... if we do giant prefabs, there are like... circular dependencies.

- maybe just have an "initialize" for all of the things...?



- keep old scene.  start a new scene where we have some controller that generates everything necessary in that scene.

right now...  there's one "winnability" bug -> if the pollution source is on the same tile as a tree building, you can't clean the pollution source - very problematic.  i think the best way to deal w this is to not allow tree building to be on pollution source.  --> should be in world creation.  

ok... we don't even have a real map gen... it's just basic map that i put into scene.  so the thing to fix would be splotch gen, but we really need to have dynamic/algorithmic map gen (building gen).

at some point it might be cool to do sort of "auto actions" - e.g., "clean up this area, this other area, etc"

separate debug displays from actual displays

put heal back in.

expand on the items idea - pretty cool i think.

regrowth hysteresis



-- actually have to carry the pollution, bring it somewhere, clean it...???
	- maybe the individual guys have a max carry size, need to drop it somewhere... then those things have a buffer that takes time to process the pollution...?  i think that's a decent idea tbh, it would slow down the cleaning.  you can put pollution down but it'll continue to spread...?  maybe not, but it'll still take up a tile.


- having roots that can clean pollution and decrease the size of the pollution blob seems nice -- it'll delete a random one at the border and if it deletes the one you're drawing from, then you need to have the roots go further...

-- drops from sources can give you powers.  also can let you turn into super trees.

-- increase difficulty of design until i can't beat it without extra powers.

-- some ideas to implement:
	- fog of war
	- heatlh damage effect should be stronger
	- map gen should be better -- initial splotches should (all?) be unconnected
	- new effects - implement as i think of them.
	- get some reasonable graphics, fix the ui which is stupidly unreadable


-- played through game the first time, took maybe 5-10 minutes.  definitely interesting and something that can be built on.

-- also need to fix random.

-- let's just go forward with...  adding the pollution effects when two connected components are joined.

- in pollution, need to add the effects and then call on spawn as appropriate
- also include remove effects, call on death as appropriate
- in the pollution controller, we need to cause each pollution to get the appropriate pollution effects (from pollution sources) when a connection occurs and they need to be removed when a connection is split.


-- mapeffect is actually pretty convoluted bc it needs a map effect component...
-- it's not like we're adding the effects to the map or terrain or w/e...
-- 

- so "pollutiondata" needs to shed:
	- droptable
	- map blocking effects (with isblockedbyeffect)
	- isn't pollution spread block more of a map effect?  




-- so the main thing i think we need to do is...  impart effects to the pollution.  those effects can themselves do their own things...

-- ok... i need to rework pollution to a large degree because it looks stupid...
-- pollution and pollution data both exist and they seem to pretty unintelligently split responsibilities.

--> yes next is to have the psources have effects and impart them to their pollution...
--> so the first thing we need to do is...  get the sources to have effects, and then...  add them to the pollutions based on the pollution sources.
--> so importantly we need to make sure we actually have the pollution sources in the pgroup


NEW IDEA: PLAYER CAN ADD EFFECTS TO PUDDLES -> COOL IDEA I THINK.
-- maybe: THAT'S WHAT THE PLAYER LEVELING UP IS GOOD FOR?!!!  PLAYER LEVEL UP TURNS INTO POLL ADJACENT BUILDING THING. --> ROOTS can extend this effect...
--> this is a perfect idea because it gives you a trump card...
--> would still need "reversibility" to some aspect of building creation so that making advanced unit into building doesn't just sap all of your abilities?

- i think the next thing has to be to give the map interesting stuff.  hazards, stuff to find, etc...  
- make opening those dead trees difficult???
- other hazards/risk-to-reward...?
- AU's need to drop their inventory when they die (or turn into buildings)
- maybe need a better way to control the guys like oni or at the very least a mass tile select tool
- weird bug happens when both units try to operate the same building (speed bar goes too fast)
- probably want to make sure AUs can't occupy the same space at end of move...
- so i guess that what we have right now is... a sort of game that makes you trudge through the slime.  i think that's an OK place to be but
	- it's not really very interesting...  kind of repetitive, etc...
- maybe roots are simply the answer to "i need way too many dudes"...
- you connect to different things with a root system and it adds the effects of those buildings there...
- the game is very broken and i don't know how to make it good...
- ok... log is... ok?
- so... if we have a bunch of logs, we have to dig out a new guy for each log...???  that seems tedious...
- i think cutting off from source - grahp coloring.. need poll'n source -- cutting off from poll source would be an interesting way.
- perhaps poll dissipates over time?  not sure...


- maybe roots?

- try making the log thing
- technical problem: the blocking effect has a "default range" but we want to change that for the log...maybe we just add the effecct and
	- give it range 0?
- turn down pollution spawn rate
- add fow???

- maybe turn off the idea that pollution prevents the cando on operable buildings...  it's too annoying and it also breaks the initial interaction where you need a cleaner to dig, etc...

- the geometry of the cleaner leapfrogging is awkward, so that should be fixed to be more satisfying.  the problem is that you need to clear an area to build the next cleaner but you need the cleaner to build the next area...  it's not really clear what the solution to this would be...

	- what's the problem here, even?  cleaner building density is too high -- feels very crowded, hard to "get anywhere..."  
	- 



	- some options for this...
	- could also be some pipes themselves -- output some sort of cleaning material?
	- suction of the pollution?????
	- 
	- could change the geometry?
		- maybe only front facing?
	- we could grow the cleaning area based on roots.  
	- could add some sort of "tube" that connects the building or roots to the AU - needs to use that tube to clean poll...
		- could use that to send back to humans...???
- as it is, the pollution spawns too quickly and kills the fuel too quickly, such that even permanently-spawning fuel from the main building is not fast enough to keep up with needs.



- i think the next thing we do should be to make the "win condition" of finding the pollution source in the white pollution, and then cleaning it up... we can use that to tune our main gameplay loop of clean/block pollution, etc...

- idea: shield should use less fuel than digging.  that would give a reason to use the shield
- maybe we could refine the shield to be thin and directional - that way it would declutter the shield stuff and also seem intuitive

- pollution covering needs to turn off those aura buildings...

- the idea of choosing between cleaning and blocking FEELS GOOD
- check vfx layer -- needs to be above the other stuff
- vfx is not spawning in some cases???
- need a better building ui
- cleanpollutionaction.cs has a potentially duplicate thing - target and targetPollution...

- next: fog of war?


- how about cleaner just drops fuel at a particular rate... this rate can be increased by connecting buildings to the cleaner through roots
	- this is easy - i already have a ccomponet for this.
- roots grow automatically but your guys can accelerate growth of roots by working on them.
- when polluted, roots split into different graphs, reducing power...
- ok... i think the main "roots need to be clear of pollution," "need roots to operate," and "need building to clear complex pollution" is the key here... we need to keep some clean path open to pollution, grow roots there, get a correct building, and clear it out.


- maybe with fog of war, finding the first level growth is hard... and needing the buildings to clean pollution is also important.  

- so the main thing you do is you need to continuously expand with roots, buildings, etc...

- for the central building, you can select what it grows -- fuel or actor units... both very very slow but a way to avoid the "problematic RNG leading to a lack of needed drops such as AUs and fuel"

- AUs can accelerate growth of thing in main building -- operate action.  improves that stat for them.  that stat, when it gets to a certain value, can let you build a new grower building with that unit.
^ next steps
- dead trees with dead spirits in them can be "sources" of root growth?

- there we go, i think the above actually feels like a game.  if we can get to the "clean up the source of white pollution" based on the above difficulties, i think that's a workable prototype/vertical slice...




- maybe the shields are more long (1 wide), making more of a log shaped thing?

- re stats making buildings i think this needs to be more of a bonus.  you want to have your guys get high stats, but you get increasingly poewrful buildings as you stat up.  then you are left with the choice of having a powerful unit or a very powerful building...

- perhaps these powerful buildings attach to roots adn impart some power to each of the buildings...

- one building - makes seeds after a long time, allowing you to build more units?

- but other than just digging to the pollution, what's the challenge...

- i guess all those ideas i had for mamking pollution more dangerous - e.g., stuck to foot, drag it, maybe they make you slow, stop, etc...

- i guess the main problem i'm having is... ok we have this blocking mechanism which is fine but... we need to make it interesting to get to the win phase...




- maybe additional ways to get the fuel...???  e.g., growing???  maybe... but then...  we still don't really have a goal.  i guess "clean all pollution..."  maybe clean the pollution SOURCES...???

- why don't we just try...  

- i think roots to function would be a good idea...

- i wonder if i can make an interesting game JUST from theh idea of these blockers and pollution effects???
	- could be at the very least an interesting prototype...

- powerful one-off items could be interesting...

- maybe the system is assigning a specific unit to perform a specific set of tasks, rather than just "whoever"

- we could also have different actions such as "clean area" or "patrol area"

- maybe terrain should be a more long term goal.  i think we need to focus on the fuel idea and how you get into the pollution areas, as well as what you need to do to win.  we have basically one mechanic now - the fueled blocking and we need other fun, synergistic things.

- probably need to do a lot of graph coloring algo stuff...

- ditches and other terrain shaping could be part of the way to deal with more complex pollution.

- i think the best thing i could do if i want to go this direction is to build out these systems in a very flexible way...  

- terrain could be quite interest... e.g., ditches to suck down the pollution...  sounds very complicated to implement but could add a very interesting strategic depth, especially if implemented with bridges...

- another idea is that pollution gets stuck to your bottom and you spread it while walking

- other ideas include that the types should...  be harder to clean as they get more serious (e.g., red > black > white)...  and we also do have those movement/damage/whatever effects...

- last thing is to add a visual effect where the shield depletion hits the shield.

- so this i think is feeling pretty good...  

- upon leveling up pollution clean, can make a building that actively cleans pollution...  but level up itself makes the pollution clean speed higher, potentially even adds effects (e.g., added pollution clean range).

ideas: maybe you need items to move trees?  i.e., find an item, revert the guy?

next things:

- need to subscribe an effect to MapEffectComponent.NotifyEffect
- so there's a question of... if our lower priority pollution exists and a higher prio one would overwrite...  is it blocked...
- i think we should call the... pollutionisblocked whenever it is blocked even if there's a potential overwrite...
- so our effects have a "source"...  now what we need is... in our "is blocked" thing for pollution...  we need to "hit" the source of the pol.  so... a new component?  maybe yes... pollution blocked damageable?
-- so we need to...  have a component that is supposed to do stuff when pollution would go.  call the trigger for that in our block thing...
--- maybe that component should register with pollution manager and pollution manager will do its event thing...???  i think that might
	be too slow??
- deprioritize recently cleaned squares for receiving new pollution.  


- slow down pollution spread maybe?

- weird input bug with mouse -- null reference exception in ObjectSelected...

- "mush dead" building can be implemented with inventory rather then the specialized bool (?) now used

- refactor the pollution manager stuff?  there's way too many classes -- pollution manager, pollution type controller, basic pollution controller...  way too much stuff.  probably would benefit just from being one class, i think

maybe for gridmap things -- give an error that the thing must be a child of a gridmap...?
	- could do this both runtime and in editor


so first -- building inventory...  
	- might have to fix how the pollution block spread works
	- map effect - block - when inventor has fuel in it

	- actor unit can place the fuel in there - what is fuel?  mushroom?  clean mushroom?
		- not sure...  maybe... the building itself specifies what fuel it can have...  ok.  
		- fuel component maybe?
	- when pollution would spawn in block area, the fuel is depleted
	- when fuel is 0, map effect goes away...

	- for this purpose, need to figure out how we even set the map effects...  might hard to put in there...

	- maybe redo the pollutionblockoverlaytilemap as it's quite messy and was kind of an ad hoc bandaid...  
	- but we don't really even need to use this for now...
	- the pollution thing is on the scriptableobject of pollutiondata...?  that's quite indirect...   


		cool, inventory has nothing to do with actorunit, so i can put this on buildings...  let's do that for the blocker.
	- will need to make a "store" action that involves storing the thingy in the building
	- i guess "effect" that will "deplete" the item...

- things like mushrooms get put into blocker inventory. Lose charges when pollution “would” hit.  
- killing pollution improves pollution kill stat, making a pollution kill building available.  
- poll kill building has a p kill aura whose rate of p kill strength depends on stat.

Like w xcom, they come at you w weapons and you can research them.

Maybe that building - the brain - is the one we want to be the one that can lose.

Alarm and terror.  Alarm is their strength.  Terror is how afraid they are.


so i think i need to make some changes to the pollution spread -- should spread from pollution spreader objects?



Need some basic combination of these things to get a satisfying game loop with win/lose condition...
Test out a bunch of building ideas.  I think we've created enough systems.
	- one idea is a low angle sprayer that sprays/deletes pollution
	- other blockers?
	- trainers (train up the units stats)?
	- planters/growers?
	- buildings for more advanced pollution
	- objects to research?



Definitely feels good to find thingies under the pollution.  The cleaning thing feels decent but gets repetitive very quickly.
RN, let's add things.  maybe add new pickups and thus buildings/things you can make...

One of the main things should be...  getting more little guys.  They can be locked behind different obstacles...

I think we need to prioritize the good ideas.  Right now there's maybe 3-5 minutes of interesting gameplay.  How do we extend this?
I think the main idea that games like this use to keep interest is changing up the gameplay loop.  Gameplay loop evolves as you progress.
We need to implement ideas to do this.  I have no idea whether any of the main mechanics are actually good.  Maybe let's stick with some
of what we have an continue from there.

OK... we have a roots idea...???  This was obviously not implemented..  
ABOVE: Coming back after 2 years
=======


- so we have to check connectivity pretty frequently i think -- basically... any time we need to know whether a building is operating
- so...  doing a pathfinder every frame is probably not going to be great.  actually it would be multiple pathfinders -- one for each building that can be enabled
--> isn't this just a "graph coloring" thing?  why path find every time, that makes no sense...
- so we will have to do the custom function for this... ok fine let's just do it
- root network node is a building component.  it has a network id, which is set by the root manager.
- resources on the map.  link up a root to gain access to those resources.  use them up, the resources deplete.  
- build a root...  how do we limit this.  

set the origin for root growth as the closest point in the building to the target.
use the midpoint of the building as the origin point for the radius.  alternatively, use the closest point from the building.
need to work out the root network thing...  
-- let's try to do it with...  the pathfinder... put a pathfinder in ...  the root manager.
otherwise we need a special root walker...  

next to do:
- roots enable buildings -- do an enable component... then we can centralize all the "is enabled" stuff...
- certain building connected to roots required to clean pollution level 2

GAMEPLAY IDEAS:

ROOTS:
- roots grow faster the closer they are to the cleaner building.
- all buildings require roots connection to function
- roots allow you to select a target - they grow towards the selected target.
- Root growth required for certain operations in trees.  Root growth -> diminishing returns so you need a certain density of trees.
- maybe simplify the pollution blocking?  i like the transform into building thing, but i think using the two guys - plant and mushroom - isn't great.  instead,
	let's use mushrooms--pick up spores, must plant the spores on a dead tree.  the dead tree should disintegrate.  a tree can always turn into a dead tree.
- roots provide stat spreading
- separate building for growing plants.  you grow into it.
- drop inventory when you die
- healer building
- links between trees can improve the total number you can build.  

RESEARCH:
- research tree?

WINNING/LOSING:
- more interesting win condition
- drop inventory ability
- blocker objects expendable as they clean pollution
- could do a progression --> find the p source for basic, clean it, plant it -- gives you some resource to clean the next level.  find that, clean it, clean up all 
	pollution, you win --> i like it.

BUILDINGS/PLANTING:
- mushrooms decompose trees
- ???
INTERACTION WITH HUMANS:
- >>>>tech is human waste -- need to research it.<<<<
	>>>>so e.g., one drop could be a book...  clean it to learn human language.  lots of other drops possible.
	maybe horrified by things like chainsaws, other forestry type equipment.<<<<

DROPS/ITEMS:
- rare drop items

ABILITIES:
- high level actor unit can make super clean/block building
- higher pollution ability --> better ability -- faster, more squares, maybe better drops/discoveries
- collectable skills (e.g., from drops)

POLLUTION:
- buildings required near advanced pollution to clean it.
- dynamically changing pollution grow speed based on number of pollution-free squares? -- that's a cool way to make the game harder as you go along
- block pollution building only slows it, not totally blocks it.
- different types of pollution.  e.g., appliances, sludge, nuclear stuff.  different ways to clean it up

STATS:
- buildings take on the stats of the unit that creates them
      two abilities: one as a unit, one as a building
      abilities spread through the root networks
- cleaning pollution stat brings you a building for cleaning pollution off things (seeds)
- idea: trees can have pollution of varying severity/difficulty to clean up.  better units are harvested from more polluted trees.
- idea: cleaning pollution stat --> pollution blocking radius on buildings.
- harvested units have randomized stats

WATER:
- something with water -- build bridges (how?).  walk on water?  clean pollution on water?

EXTRA:
- underground "streams" of pollution?  cause pollution to pop up under your stuff?
- pipe to send pollution out to human settlements
- mobile enemies?  loggers?  exterminators?
- spawn things like mosquitos to fend off humans.  maybe can be done by creating a pool of standing water.
- spawn animals to create diseases to fend off humans.
- threat meter, warning meter.  more you do, higher it goes, threats get worse.
- go/build on water (to clean pollution)...
- you can build an area -- the area defines how many units you can have.  
- re sentience: maybe you get abilities as a forest itself...
- in addition to cleaning pollution, need to terraform (e.g., remove water/whatever...) (???) --> i don't' think this meshes with the flavor of "cleaning" the forest.  
	except maybe something like restoring bodies of water.

UI/EOU Fixes:
- fix selectable to cycle through objects in a tile.
- need to make sure roots don't grow inside of trees (just remove certain first nodes).
- context click for buildings too... see if we can generalize the actorunitcontextclick.
- area of effect tools
- units shouldn't stack
- queue unit actions (w/ visual feedback)
- add an info panel for the unit you clicked on
- need to refactor the unitactioncontextclick
- pollution source manager
- add: error/status messages in game.
- since cleaning pollution will be such a big part of the game, i think we need to reduce the number of clicks necessary.  we can go with the "Traditional" method of 
	removing control of individual units and just designating orders for parts of the map.  but i think an intermediate method of allowing dragged rectangles for cleaning 
	would be best.  try it out and see if not.

pixel art: https://www.reddit.com/r/IndieGaming/comments/msfjpe/hello_i_am_a_pixel_artist_that_goes_by_the_name/
https://opengameart.org/content/swamp-2d-tileset-pixel-art
https://kenney.nl/
